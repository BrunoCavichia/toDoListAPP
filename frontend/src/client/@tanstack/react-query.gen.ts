// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { deleteTodoById, getTodo, getTodoById, getWeatherForecast, type Options, postTodo, putTodoById } from '../sdk.gen';
import type { DeleteTodoByIdData, GetTodoByIdData, GetTodoData, GetWeatherForecastData, PostTodoData, PutTodoByIdData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getWeatherForecastQueryKey = (options?: Options<GetWeatherForecastData>) => createQueryKey('getWeatherForecast', options);

export const getWeatherForecastOptions = (options?: Options<GetWeatherForecastData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getWeatherForecast({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getWeatherForecastQueryKey(options)
    });
};

export const getTodoQueryKey = (options?: Options<GetTodoData>) => createQueryKey('getTodo', options);

export const getTodoOptions = (options?: Options<GetTodoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTodo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTodoQueryKey(options)
    });
};

export const postTodoMutation = (options?: Partial<Options<PostTodoData>>): UseMutationOptions<unknown, DefaultError, Options<PostTodoData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostTodoData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postTodo({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        } 
    };
    return mutationOptions;
};

export const deleteTodoByIdMutation = (options?: Partial<Options<DeleteTodoByIdData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteTodoByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteTodoByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteTodoById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTodoByIdQueryKey = (options: Options<GetTodoByIdData>) => createQueryKey('getTodoById', options);

export const getTodoByIdOptions = (options: Options<GetTodoByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTodoById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTodoByIdQueryKey(options)
    });
};

export const putTodoByIdMutation = (options?: Partial<Options<PutTodoByIdData>>): UseMutationOptions<unknown, DefaultError, Options<PutTodoByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutTodoByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putTodoById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
