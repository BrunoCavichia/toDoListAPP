// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteTodoByIdData, DeleteTodoByIdResponses, GetTodoByIdData, GetTodoByIdResponses, GetTodoData, GetTodoResponses, PostTodoData, PostTodoResponses, PutTodoByIdData, PutTodoByIdResponses, PutTodoToggleAllData, PutTodoToggleAllResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getTodo = <ThrowOnError extends boolean = false>(options?: Options<GetTodoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTodoResponses, unknown, ThrowOnError>({
        url: '/Todo',
        ...options
    });
};

export const postTodo = <ThrowOnError extends boolean = false>(options: Options<PostTodoData, ThrowOnError>) => {
    return (options.client ?? client).post<PostTodoResponses, unknown, ThrowOnError>({
        url: '/Todo',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteTodoById = <ThrowOnError extends boolean = false>(options: Options<DeleteTodoByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTodoByIdResponses, unknown, ThrowOnError>({
        url: '/Todo/{id}',
        ...options
    });
};

export const getTodoById = <ThrowOnError extends boolean = false>(options: Options<GetTodoByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTodoByIdResponses, unknown, ThrowOnError>({
        url: '/Todo/{id}',
        ...options
    });
};

export const putTodoById = <ThrowOnError extends boolean = false>(options: Options<PutTodoByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutTodoByIdResponses, unknown, ThrowOnError>({
        url: '/Todo/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putTodoToggleAll = <ThrowOnError extends boolean = false>(options: Options<PutTodoToggleAllData, ThrowOnError>) => {
    return (options.client ?? client).put<PutTodoToggleAllResponses, unknown, ThrowOnError>({
        url: '/Todo/toggle-all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
